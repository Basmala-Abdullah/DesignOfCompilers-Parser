# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Sample2.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib.pyplot as plt
import networkx as nx
import random
from ParserTable import parserTable_MainWindow
class Ui_MainWindow(object):

    list_of_edges = []
    list_of_classes = []
    listNumbers = []
    listID = []
    stack2 = []
    unpopedStack = []

    parse_table = [['s7', '', '', '', '', 's2', '', '1', '3', '5', '6', ''],
                   ['s7', '', '', '', '', 's2', 'Accepted', '', '4', '5', '6', '']
        , ['s7', '', '', '', '', 's2', '', '15', '3', '5', '6', ''],
                   ['r2', '', '', '', 'r2', 'r2', 'r2', '', '', '', '', '']
        , ['r1', '', '', '', 'r1', 'r1', 'r1', '', '', '', '', ''],
                   ['r3', '', '', '', 'r3', 'r3', 'r3', '', '', '', '', '']
        , ['r4', '', '', '', 'r4', 'r4', 'r4', '', '', '', '', ''], ['', 's14', '', '', '', '', '', '', '', '', '', '']
        , ['s9', '', '', '', '', '', '', '', '', '', '', ''], ['r5', '', '', '', 'r5', 'r5', 'r5', '', '', '', '', '']
        , ['', '', 'r7', '', '', '', '', '', '', '', '', ''], ['', '', 'r8', '', '', '', '', '', '', '', '', '']
        , ['', '', 's13', '', '', '', '', '', '', '', '', ''], ['r6', '', '', '', 'r6', 'r6', 'r6', '', '', '', '', '']
        , ['s10', '', '', 's11', '', '', '', '', '', '', '', '12'],
                   ['s7', '', '', '', 's8', 's2', '', '', '4', '5', '6', '']]
    #column values of the parse table
    columns = {
        'ID': 0,
        ':=': 1,
        ';': 2,
        'Number': 3,
        'until': 4,
        'repeat': 5,
        '$': 6,
        'stmt-seq': 7,
        'statement': 8,
        'repeat-stmt': 9,
        'assign-stmt': 10,
        'factor': 11,
    }
    #number of reductions to each non-terminal from the stack
    reductions = {
        '1': [4, 'stmt-seq'],
        '2': [2, 'stmt-seq'],
        '3': [2, 'statement'],
        '4': [2, 'statement'],
        '5': [8, 'repeat-stmt'],
        '6': [8, 'assign-stmt'],
        '7': [2, 'factor'],
        '8': [2, 'factor'],
    }

    #number of pops from stack2 for each non-terminal (without the number of states)
    Non_Terminal = {'stmt-seq': 1,
                    'statement': 1,
                    'repeat-stmt': 4,
                    'assign-stmt': 4,
                    'factor': 1
                    }
    def clear(self):
        Ui_MainWindow.listNumbers = []
        Ui_MainWindow.listID = []
        Ui_MainWindow.stack2 = []
        Ui_MainWindow.list_of_classes = []
        Ui_MainWindow.list_of_edges = []
        Ui_MainWindow.unpopedStack = []
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("MainWindow", ""))
    #Lexical Analysis
    def TokenList(self):
        Keywords = {'repeat': 'repeat keyword', 'until': 'until keyword'}
        Keywords_key = Keywords.keys()
        AssignOperators = {':=': 'Assignment op'}
        AssignOperators_key = AssignOperators.keys()

        punctuation_symbol = {';': 'semi-colon'}
        punctuation_symbol_key = punctuation_symbol.keys()
        entryInput = self.textEdit.toPlainText() #################################################################input
        a1 = entryInput
        count = 0
        p = a1.split("\n")
        for line in p:
            tokens = line.split(' ')
            if tokens == ['']:
                return
            print("Tokens are ", tokens)

            # ###DFA###_#
            for token in tokens:
                count = count + 1
                if token in AssignOperators_key:
                    print(token, "operator is ", AssignOperators[token])
                    Ui_MainWindow.list_of_classes.append(':=')
                #elif token in operators_key:
                #    print(token, "operator is ", operators[token])
                #    Ui_MainWindow.list_of_classes.append('Operator')
                elif token in punctuation_symbol_key:
                    print(token, " punctuation symbol is ", punctuation_symbol[token])
                    Ui_MainWindow.list_of_classes.append(';')
                elif token in Keywords_key:
                    print(token, " Keyword is ", Keywords[token])
                    Ui_MainWindow.list_of_classes.append(token)
                elif (token[0]).isdecimal():
                    flag1 = True
                    for char in token[1::1]:
                        if not (char.isdecimal()):
                            flag1 = False
                    if flag1 == True:
                        print(token, "number is Number")
                        Ui_MainWindow.list_of_classes.append('Number')
                        Ui_MainWindow.listNumbers.append(token)

                elif (token[0]).isalpha():
                    flag2 = True
                    for char in token[1::1]:
                        if not (char.isalpha() or char.isdecimal() or char == '_'):
                            flag2 = False
                    if flag2 == True:
                        print(token, "identifier is Identifier")
                        Ui_MainWindow.list_of_classes.append('ID')
                        Ui_MainWindow.listID.append(token)
                else:
                    print(token, " is an invalid token")
                    Ui_MainWindow.list_of_classes.append('Invalid')

            print("_ _ _ _ _ _ _ _ _ _ _ _ _ _ _  _")
            print(Ui_MainWindow.list_of_classes)

    #Function to generate the tree
    def hierarchy_pos(self,G, root=None, width=1., vert_gap=0.2, vert_loc=0, xcenter=0.5):

        if not nx.is_tree(G):
            raise TypeError('cannot use hierarchy_pos on a graph that is not a tree')

        if root is None:
            if isinstance(G, nx.DiGraph):
                root = next(iter(nx.topological_sort(G)))  # allows back compatibility with nx version 1.11
            else:
                root = random.choice(list(G.nodes))

        def _hierarchy_pos(G, root, width=1., vert_gap=0.2, vert_loc=0, xcenter=0.5, pos=None, parent=None):

            if pos is None:
                pos = {root: (xcenter, vert_loc)}
            else:
                pos[root] = (xcenter, vert_loc)
            children = list(G.neighbors(root))
            if not isinstance(G, nx.DiGraph) and parent is not None:
                children.remove(parent)
            if len(children) != 0:
                dx = width / len(children)
                nextx = xcenter - width / 2 - dx / 2
                for child in children:
                    nextx += dx
                    pos = _hierarchy_pos(G, child, width=dx, vert_gap=vert_gap,
                                         vert_loc=vert_loc - vert_gap, xcenter=nextx,
                                         pos=pos, parent=root)
            return pos

        return _hierarchy_pos(G, root, width, vert_gap, vert_loc, xcenter)

    def checkStack(self):

        self.TokenList()
        for element in Ui_MainWindow.list_of_classes:
            if element == 'Invalid':
                _translate = QtCore.QCoreApplication.translate
                self.label.setText(_translate("MainWindow", "ERROR!"))
                return
        stack = []
        stack.append('0')
        Ui_MainWindow.list_of_classes.append('$')
        cell = Ui_MainWindow.parse_table[0][Ui_MainWindow.columns[Ui_MainWindow.list_of_classes[0]]]
        i = 0
        print("2bl while")
        print(Ui_MainWindow.list_of_classes)
        while (cell != '' and cell != 'Accepted' and i < len(Ui_MainWindow.list_of_classes)):
            print(i)
            if (cell.startswith('s')):
                stack.append(Ui_MainWindow.list_of_classes[i])
                Ui_MainWindow.stack2.append(Ui_MainWindow.list_of_classes[i])
                print("appending to stack " + Ui_MainWindow.list_of_classes[i])
                i = i + 1
                stack.append(cell[1:])
                # generate node
                print("appending to stack " + cell[1:])
            elif (cell.startswith('r')):
                num = cell[1]
                list = Ui_MainWindow.reductions[num]

                print("poping stack ")
                print(list[0])

                for j in range(0, list[0]):
                    stack.pop()
                print("appending to stack " + list[1])
                stack.append(list[1])
                Ui_MainWindow.stack2.append(list[1])
                row2 = int(stack[len(stack) - 2])
                col2 = int(Ui_MainWindow.columns[list[1]])
                stack.append(Ui_MainWindow.parse_table[row2][col2])
                print("appending to stack ")
                print(Ui_MainWindow.parse_table[row2][col2])
                print("Ui_MainWindow.stack2 :")
                print(Ui_MainWindow.stack2)
            else:
                print('error1')  # generate error message
                _translate = QtCore.QCoreApplication.translate
                self.label.setText(_translate("MainWindow", "ERROR!"))
                return
            index = len(stack) - 1
            print(index)
            row = int(stack[index])
            print(row)
            col = int(Ui_MainWindow.columns[Ui_MainWindow.list_of_classes[i]])
            print(col)
            cell = Ui_MainWindow.parse_table[row][col]
        for i in range(0, len(Ui_MainWindow.stack2)):
            counter = 0
            for j in range(i + 1, len(Ui_MainWindow.stack2)):
                if Ui_MainWindow.stack2[i] == Ui_MainWindow.stack2[j]:
                    counter = counter + 1
                    Ui_MainWindow.stack2[j] = Ui_MainWindow.stack2[i] + ' '
        print("ana btb3 stack2 ahoo -------------------------------------->")
        print(Ui_MainWindow.stack2)
        for element in Ui_MainWindow.stack2:
            Ui_MainWindow.unpopedStack.append(element)
        ind = 1
        # for ind in range (1,len(Ui_MainWindow.stack2)):
        while ind < len(Ui_MainWindow.stack2):
            print("Nxt element of ")
            print(ind)
            print(Ui_MainWindow.stack2[ind])
            for element2 in Ui_MainWindow.Non_Terminal:
                print(element2)
                if Ui_MainWindow.stack2[ind].startswith(element2):
                    print("this exists in non terminal" + element2)
                    x = Ui_MainWindow.stack2[ind]
                    print(x)
                    num_pops = int(Ui_MainWindow.Non_Terminal[element2])
                    print(num_pops)
                    for i in range(0, num_pops):
                        print(Ui_MainWindow.stack2[ind - i - 1])
                        Ui_MainWindow.list_of_edges.append((x, Ui_MainWindow.stack2[ind - i - 1]))
                        print("list of edges: ")
                        print(Ui_MainWindow.list_of_edges)
                        Ui_MainWindow.stack2.pop(ind - i - 1)
                        print("Ui_MainWindow.stack2: ")
                        print(Ui_MainWindow.stack2)
                        lastParent = x
                    ind = ind - num_pops
            ind = ind + 1
            print(ind)
        print(Ui_MainWindow.list_of_edges)

        print(Ui_MainWindow.list_of_edges)
        if (cell == 'Accepted'):
            for i in range(0, len(Ui_MainWindow.listID)):
                counter = 0
                for j in range(i + 1, len(Ui_MainWindow.listID)):
                    if Ui_MainWindow.listID[i] == Ui_MainWindow.listID[j]:
                        counter = counter + 1
                        Ui_MainWindow.listID[j] = Ui_MainWindow.listID[i] + ' '
            for i in range(0, len(Ui_MainWindow.listNumbers)):
                counter = 0
                for j in range(i + 1, len(Ui_MainWindow.listNumbers)):
                    if Ui_MainWindow.listNumbers[i] == Ui_MainWindow.listNumbers[j]:
                        counter = counter + 1
                        Ui_MainWindow.listNumbers[j] = Ui_MainWindow.listNumbers[i] + ' '
            k = 0
            for (y, z) in Ui_MainWindow.list_of_edges:
                if (z.startswith('Number')):
                    Ui_MainWindow.list_of_edges.append((z, Ui_MainWindow.listNumbers[k]))
                    k = k + 1
            t = 0
            for z in Ui_MainWindow.unpopedStack:
                print(Ui_MainWindow.unpopedStack)
                if (z.startswith('ID')):
                    print(z)
                    print(Ui_MainWindow.listID[t])
                    Ui_MainWindow.list_of_edges.append((z, Ui_MainWindow.listID[t]))
                    t = t + 1
            print("Accepted")
            G = nx.DiGraph()
            Ui_MainWindow.list_of_edges.reverse()
            G.add_edges_from(Ui_MainWindow.list_of_edges)
            print("b3mil graph")

            pos = self.hierarchy_pos(G, lastParent)
            print("b3d hierarchy")
            fig = plt.figure(1, figsize=(200, 80), dpi=100)
            nx.draw(G, with_labels=True, pos=pos, node_color='white', node_size=800)
            fig.show()

        else:
            print("error2")
            _translate = QtCore.QCoreApplication.translate
            self.label.setText(_translate("MainWindow", "ERROR!"))
            return

    def showParserTable(self):
        self.window3 = QtWidgets.QMainWindow()
        self.ui = parserTable_MainWindow()
        self.ui.setupUi(self.window3)
        self.window3.show()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(682, 439)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(50, 40, 251, 211))
        self.textEdit.setObjectName("textEdit")

        self.Submit = QtWidgets.QPushButton(self.centralwidget)
        self.Submit.setGeometry(QtCore.QRect(210, 260, 93, 28))
        self.Submit.setObjectName("Submit")
        self.Submit.clicked.connect(self.checkStack)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(50, 310, 251, 71))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(207, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.LinkVisited, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(207, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.LinkVisited, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 35, 38))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(207, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.LinkVisited, brush)
        self.label.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold Condensed")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)

        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 35, 38);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(370, 40, 221, 221))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_2.clicked.connect(self.showParserTable)



        self.Clear = QtWidgets.QPushButton(self.widget)
        self.Clear.setObjectName("Clear")
        self.verticalLayout.addWidget(self.Clear)
        self.Clear.clicked.connect(self.clear)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 682, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SLR(1) Parser"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.Submit.setText(_translate("MainWindow", "Submit"))

        self.pushButton_2.setText(_translate("MainWindow", "Show Parse Table"))

        self.Clear.setText(_translate("MainWindow", "Clear"))
